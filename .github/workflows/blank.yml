name: Build Android APK and AAB

env:
  # The name of the main module repository
  MAIN_PROJECT_MODULE: app
  # The name of the Play Store app
  PLAYSTORE_NAME: IIECat
  # Java version to use
  JAVA_VERSION: '17'

on:
  # Trigger on pushes to release branch
  push:
    branches:
      - 'release'
      - 'main' # Also trigger on main for testing
    tags:
      - 'v*' # Trigger on version tags
  
  # Trigger on pull requests to release branch
  pull_request:
    branches:
      - 'release'
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release/both)'
        required: true
        default: 'both'
        type: choice
        options:
          - debug
          - release
          - both

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper versioning
      
      # Set environment variables
      - name: Set current date as env variable
        run: echo "BUILD_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      
      - name: Set repository name as env variable
        run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      
      - name: Set build number
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
      
      - name: Set version name
        run: |
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            echo "VERSION_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION_NAME=${{ github.sha }}" >> $GITHUB_ENV
          fi
      
      # Set up JDK
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin is the recommended distribution
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
      
      # Validate Gradle wrapper
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
      
      # Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      
      # Run lint checks
      - name: Run lint checks
        run: ./gradlew lint
        continue-on-error: true
      
      # Run unit tests
      - name: Run unit tests
        run: ./gradlew test --continue
      
      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ env.BUILD_DATE }}
          path: |
            **/build/reports/tests/
            **/build/test-results/
      
      # Build debug APK (conditional)
      - name: Build debug APK
        if: github.event.inputs.build_type != 'release' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        run: ./gradlew assembleDebug
      
      # Build release APK (conditional)
      - name: Build release APK
        if: github.event.inputs.build_type != 'debug' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        run: ./gradlew assembleRelease
      
      # Build release AAB (conditional)
      - name: Build release AAB
        if: github.event.inputs.build_type != 'debug' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        run: ./gradlew ${{ env.MAIN_PROJECT_MODULE }}:bundleRelease
      
      # Upload debug APK artifact
      - name: Upload debug APK
        if: github.event.inputs.build_type != 'release' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}-${{ env.PLAYSTORE_NAME }}-${{ env.REPOSITORY_NAME }}-debug-apk
          path: ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/debug/*.apk
          retention-days: 30
      
      # Upload release APK artifact
      - name: Upload release APK
        if: github.event.inputs.build_type != 'debug' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}-${{ env.PLAYSTORE_NAME }}-${{ env.REPOSITORY_NAME }}-release-apk
          path: ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/release/*.apk
          retention-days: 90
      
      # Upload release AAB artifact
      - name: Upload release AAB
        if: github.event.inputs.build_type != 'debug' || github.event.inputs.build_type == '' || github.event.inputs.build_type == 'both'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}-${{ env.PLAYSTORE_NAME }}-${{ env.REPOSITORY_NAME }}-release-aab
          path: ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/bundle/release/*.aab
          retention-days: 90
      
      # Create release (only on tags)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/release/*.apk
            ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/bundle/release/*.aab
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Upload to Play Store (optional - requires setup)
      # Uncomment and configure if you want automatic Play Store uploads
      # - name: Upload to Play Store
      #   if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
      #     packageName: com.yourcompany.yourapp
      #     releaseFiles: ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/bundle/release/*.aab
      #     track: production
      #     status: completed
